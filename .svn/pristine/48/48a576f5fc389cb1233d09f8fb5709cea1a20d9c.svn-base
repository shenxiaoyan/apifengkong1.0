package apifengkong.util;

import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;

import org.apache.http.HttpResponse;
import org.apache.http.util.EntityUtils;

import com.fasterxml.jackson.databind.ObjectMapper;

import apifengkong.entity.SupplyAPI;

public class AliyunCallable implements Callable<Map> {

	private SupplyAPI supplyAPI;
	private String method;
	private Map<String,String> headers;
	private  Map<String, String> querys;
	private Map<String, String> bodys;
	private String host;
	private String path;
	private String appcode;

	public AliyunCallable(SupplyAPI supplyAPI,  HashMap<String, String> headers , HashMap<String, String> querys , HashMap<String, String> bodys) {
		super();
		this.supplyAPI = supplyAPI;
		this.method = supplyAPI.getMethod().toString().toUpperCase();
		this.headers = new HashMap<String,String>(headers);
		this.querys = new HashMap<String,String>(querys);
		this.bodys = new HashMap<String,String>(bodys);
		this.host = supplyAPI.getHost();
		this.path = supplyAPI.getPath();
		this.appcode = supplyAPI.getSupplier().getAppCode();
	}

	@Override
	public Map call() {
		
		// 最后在header中的格式(中间是英文空格)为Authorization:APPCODE
		// 83359fd73fe94948385f570e3c139105
		headers.put("Authorization", "APPCODE " + appcode);
		if ("POST".equalsIgnoreCase(method)) {
			try {
				HttpResponse response = HttpUtils.doPost(host, path, method, headers, querys, bodys);
				ObjectMapper mapper = new ObjectMapper();
				Map bean = mapper.readValue(EntityUtils.toString(response.getEntity(), Charset.forName("utf-8")),
						Map.class);

				return bean;

			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		} else {
			try {

				HttpResponse response = HttpUtils.doGet(host, path, method, headers, querys);
				// return response.toString();
				// 获取response的body

				ObjectMapper mapper = new ObjectMapper();
				Map bean = mapper.readValue(EntityUtils.toString(response.getEntity(), Charset.forName("utf-8")),
						Map.class);

				return bean;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}
	}

}
