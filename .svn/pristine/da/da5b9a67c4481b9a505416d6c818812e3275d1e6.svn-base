package apifengkong.config;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import apifengkong.service.UserService;

@Configuration
@EnableWebSecurity
@EnableTransactionManagement
@EnableGlobalMethodSecurity(prePostEnabled = true, proxyTargetClass = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {


	private Logger logger = LoggerFactory.getLogger(this.getClass());

	/**
	 * 主过滤器
	 *
	 * @param http
	 * @throws Exception
	 */
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable();
		http.headers().frameOptions().disable();
		http
		.formLogin().defaultSuccessUrl("/", true).loginPage("/login").permitAll()
		.and().authorizeRequests().antMatchers("/register","/password","/js/**","/css/**","/images/**","/img/**","/fengkongweishi/**","/fengkongweishi/images/**",
				"/libs/**","/*.txt","/*.html","/callback/**","/search/personLoan","/search/personWeb" 
				,"/company/register","/user/register","/company/registerSms","/user/registerSms","/user/rePasswordSms","/user/rePassword").permitAll()
		.and().authorizeRequests().anyRequest().authenticated()   //拦截
		.and().rememberMe().tokenValiditySeconds(60 * 60 * 24 * 30)
		.and().logout().permitAll();
	}
	
	
	@Bean
    UserDetailsService customUserService() {
        return new UserService();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(customUserService());
    }
	
}
