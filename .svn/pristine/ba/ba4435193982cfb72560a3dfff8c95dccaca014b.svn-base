package apifengkong.controller;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alipay.api.AlipayApiException;
import com.alipay.api.internal.util.AlipaySignature;

import apifengkong.entity.Company;
import apifengkong.entity.CompanyRemainderLog;
import apifengkong.entity.CompanyRemainderLogRepository;
import apifengkong.entity.CompanyRepository;
import apifengkong.entity.User;
import apifengkong.entity.UserRemainderLog;
import apifengkong.entity.UserRemainderLogRepository;
import apifengkong.entity.UserRepository;
import apifengkong.entity.UserRemainderLog.ChargeStatus;
import apifengkong.util.FailResponse;

@Controller
@RequestMapping(value = "/callback")
public class NotifyController {

	@Value("${alipay.url}")
	private String url;
	@Value("${alipay.appId}")
	private String appId;
	@Value("${alipay.appPrivateKey}")
	private String appPrivateKey;
	@Value("${alipay.format}")
	private String format;
	@Value("${alipay.charset}")
	private String charset;
	@Value("${alipay.alipayPublicKey}")
	private String alipayPublicKey;
	@Value("${alipay.signType}")
	private String signType;

	@Autowired
	private CompanyRemainderLogRepository companyRemainderLogRepository;
	
	@Autowired
	private UserRemainderLogRepository userRemainderLogRepository;
	
	@Autowired
	private CompanyRepository companyRepository;
	
	@Autowired
	private UserRepository userRepository;

	@RequestMapping(value = "/taobaoReturn")
	@ResponseBody
	public Object taobaoReturn() {
		HashMap<String, Object> hashMap = new HashMap<String, Object>();
		hashMap.put("status", "success");
		hashMap.put("code", 0);
		hashMap.put("message", "支付成功");
		return hashMap;
	}

	@ResponseBody
	@RequestMapping(value = "/taobaoNotify", method = RequestMethod.POST)
	@Transactional
	public String taobaoNotify(HttpServletRequest httpRequest) {
		
		System.out.println(httpRequest.getParameterMap());
		Map<String, String> params = new HashMap<String, String>();
		Map<String, String[]> requestParams = httpRequest.getParameterMap();
		for (Iterator<String> iter = requestParams.keySet().iterator(); iter.hasNext();) {
			String name = (String) iter.next();
			String[] values = (String[]) requestParams.get(name);
			String valueStr = "";
			for (int i = 0; i < values.length; i++) {
				valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + ",";
			}
			params.put(name, valueStr);
		}

		boolean signVerified;
		try {
			signVerified = AlipaySignature.rsaCheckV1(params, alipayPublicKey, charset,signType);

			if (signVerified) {
				// 商户订单号
				String out_trade_no = httpRequest.getParameter("out_trade_no");
				String[] split = out_trade_no.split("_");
				String remainderLogType = split[0];
				String remainderLogId = split[1];

				Object log = null;
				if (remainderLogId != null) {
					Integer id = Integer.valueOf(remainderLogId);
					if ("company".equals(remainderLogType)) {
						log = companyRemainderLogRepository.findOne(id);
					} else if ("user".equals(remainderLogType)) {
						log = userRemainderLogRepository.findOne(id);
					}
					if(log == null){
						System.out.println(1);
						return "failure";
					}

				}else{
					System.out.println(2);
					return "failure";
				}

				// 支付宝交易号
				String trade_no = httpRequest.getParameter("trade_no");
				
				String total_amount_string =  httpRequest.getParameter("total_amount");
				
				int total_amount = Double.valueOf(total_amount_string).intValue();

				// 交易状态
				String trade_status = httpRequest.getParameter("trade_status");

				if (trade_status.equals("TRADE_FINISHED")) {
					// 判断该笔订单是否在商户网站中已经做过处理
					// 如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
					// 如果有做过处理，不执行商户的业务程序

					// 注意：
					// 退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知
				} else if (trade_status.equals("TRADE_SUCCESS")) {
					// 判断该笔订单是否在商户网站中已经做过处理
					// 如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
					// 如果有做过处理，不执行商户的业务程序
					if(log instanceof CompanyRemainderLog){
						CompanyRemainderLog companyRemainderLog = (CompanyRemainderLog)log;
						if(companyRemainderLog.getRealValue() > total_amount){
							return "failure";
						}
						if(companyRemainderLog.getStatus().equals(ChargeStatus.WAIT_BUYER_PAY)){
							companyRemainderLog.setStatus(ChargeStatus.TRADE_SUCCESS);
							companyRemainderLog.setTradeNo(trade_no);
							Company company = companyRemainderLog.getCompany();
							company.deposit(companyRemainderLog.getValue());
							companyRepository.save(company);
							companyRemainderLogRepository.save(companyRemainderLog);
						}
						
					}else if(log instanceof UserRemainderLog){
						UserRemainderLog userRemainderLog = (UserRemainderLog)log;
						if(userRemainderLog.getRealValue() > total_amount){
							return "failure";
						}
						if(userRemainderLog.getStatus().equals(ChargeStatus.WAIT_BUYER_PAY)){
							userRemainderLog.setStatus(ChargeStatus.TRADE_SUCCESS);
							userRemainderLog.setTradeNo(trade_no);
							User user = userRemainderLog.getUser();
							user.deposit(userRemainderLog.getValue());
							userRepository.save(user);
							userRemainderLogRepository.save(userRemainderLog);
						}
					}else{
						System.out.println(3);
						return "failure";
					}
					System.out.println(4);
					return "success";
				}
				System.out.println(5);
				return "success";

			} else {
				System.out.println(6);
				// TODO 验签失败则记录异常日志，并在response中返回failure.
				return "failure";
			}
		} catch (AlipayApiException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(7);
		return "failure";

	}
}
