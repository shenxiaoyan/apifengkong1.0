package apifengkong.service;

import java.util.Date;
import java.util.Random;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.stereotype.Service;

import com.alipay.api.AlipayApiException;
import com.alipay.api.DefaultAlipayClient;
import com.alipay.api.request.AlipayTradeCreateRequest;
import com.alipay.api.request.AlipayTradePagePayRequest;

import apifengkong.controller.UserController.PaymentChannel;
import apifengkong.controller.UserController.Platform;
import apifengkong.entity.Company;
import apifengkong.entity.CompanyRemainderLog;
import apifengkong.entity.CompanyRemainderLogRepository;
import apifengkong.entity.CompanyRepository;
import apifengkong.entity.UserRemainderLog.ChargeStatus;
import apifengkong.entity.UserRemainderLog.ChargeType;
import apifengkong.util.Common;
import apifengkong.util.FailResponse;

@Service
public class CompanyService {

	@Value("${alipay.url}")
	private String url;
	@Value("${alipay.appId}")
	private String appId;
	@Value("${alipay.appPrivateKey}")
	private String appPrivateKey;
	@Value("${alipay.format}")
	private String format;
	@Value("${alipay.charset}")
	private String charset;
	@Value("${alipay.alipayPublicKey}")
	private String alipayPublicKey;
	@Value("${alipay.signType}")
	private String signType;
	@Value("${alipay.returnUrl}")
	private String returnUrl;
	@Value("${alipay.notifyUrl}")
	private String notifyUrl;
	@Autowired
	private CompanyRepository companyRepository;

	@Autowired
	private CompanyRemainderLogRepository companyRemainderLogRepository;
	
	@Autowired
	SmsService smsService;
	
	@Autowired
	private RedisCacheManager cacheManager;

	@Transactional
	public void directDeposit(Company company, Integer amount, PaymentChannel channel, String reason) {
		if (amount == null) {
			throw new FailResponse(9111, "充值金额不能空");
		}
		Company findOne = companyRepository.findOne(company.getId());
		if (findOne == null) {
			throw new FailResponse(5467, "公司不存在");
		}

		findOne.deposit(amount);
		companyRepository.save(findOne);

		CompanyRemainderLog companyRemainderLog = new CompanyRemainderLog();
		companyRemainderLog.setByUser(Common.getPrincipal().getUser());
		companyRemainderLog.setChannel(channel);
		companyRemainderLog.setCompany(findOne);
		companyRemainderLog.setCreateTime(new Date());
		companyRemainderLog.setType(ChargeType.DEPOSIT);
		companyRemainderLog.setValue(amount);
		companyRemainderLog.setNote(reason);
		companyRemainderLog.setStatus(ChargeStatus.TRADE_SUCCESS);
		companyRemainderLogRepository.save(companyRemainderLog);
	}
	
	
	@Transactional
	public Integer indirectDeposit(Company company, Integer amount, PaymentChannel channel,Platform platform) {
		if (amount == null) {
			throw new FailResponse(9111, "充值金额不能空");
		}
		Company findOne = companyRepository.findOne(company.getId());
		if (findOne == null) {
			throw new FailResponse(5467, "公司不存在");
		}

		CompanyRemainderLog companyRemainderLog = new CompanyRemainderLog();
		
		if(amount.equals(1000)){
			companyRemainderLog.setValue(1100);
		}else if(amount.equals(5000)){
			companyRemainderLog.setValue(5750);
		}else if(amount.equals(10000)){
			companyRemainderLog.setValue(12000);
		}else{
			companyRemainderLog.setValue(amount);
		}
		if(Common.getPrincipal()!=null){
			companyRemainderLog.setByUser(Common.getPrincipal().getUser());
		}
		companyRemainderLog.setChannel(channel);
		companyRemainderLog.setCompany(findOne);
		companyRemainderLog.setCreateTime(new Date());
		companyRemainderLog.setType(ChargeType.DEPOSIT);
		companyRemainderLog.setRealValue(amount);
		companyRemainderLog.setPlatform(platform);
		companyRemainderLog.setStatus(ChargeStatus.WAIT_BUYER_PAY);
		CompanyRemainderLog save = companyRemainderLogRepository.save(companyRemainderLog);
		return save.getId();
	}

	@Transactional
	public void consume(Company company, Integer value, PaymentChannel channel, Integer id) {

		company.withdraw(value);
		companyRepository.save(company);

		CompanyRemainderLog companyRemainderLog = new CompanyRemainderLog();
		if(Common.getPrincipal()!=null){
			companyRemainderLog.setByUser(Common.getPrincipal().getUser());
		}
		companyRemainderLog.setChannel(channel);
		companyRemainderLog.setCompany(company);
		companyRemainderLog.setCreateTime(new Date());
		companyRemainderLog.setType(ChargeType.CONSUME);
		companyRemainderLog.setValue(value);
		companyRemainderLog.setEntityId(id);
		companyRemainderLogRepository.save(companyRemainderLog);
	}

	@Transactional
	public String taobaoDeposit(Integer amount) {

		Company company = Common.getPrincipal().getCompany();
		DefaultAlipayClient alipayClient = new DefaultAlipayClient(url, appId,appPrivateKey,format,charset,alipayPublicKey,signType);
		AlipayTradePagePayRequest alipayRequest = new AlipayTradePagePayRequest();// 创建API对应的request
		Integer id = indirectDeposit(company,amount,PaymentChannel.FRONTEND,Platform.ALIPAY);
		
		
		alipayRequest.setReturnUrl(returnUrl);
		alipayRequest.setNotifyUrl(notifyUrl);// 在公共参数中设置回跳和通知地址
		alipayRequest.setBizContent("{" + "    \"out_trade_no\":\"company_"+ id +"\","
				+ "    \"product_code\":\"FAST_INSTANT_TRADE_PAY\"," + "    \"total_amount\":" + amount + ","
				+ "    \"subject\":\"deposit\"," + "    \"body\":\"company deposit\""
				
				+ "  }");// 填充业务参数
		String form = "";
		try {
			form = alipayClient.pageExecute(alipayRequest).getBody(); // 调用SDK生成表单
			
			return form;
		} catch (AlipayApiException e) {
			e.printStackTrace();
		}
		throw new FailResponse(6511, "生成支付宝支付页错误");
	}


	public void sendSms(String ipAddress, String username) {
		if("".equals(username.trim())){
			throw new FailResponse(3713, "手机没有填写");
		}
		smsService.controlRate(ipAddress);
		Integer rd = 100000 + new Random().nextInt(899999);
		cacheManager.getCache("sms").put(username,rd);
		cacheManager.getCache("smsControl").put(ipAddress,1);
		smsService.send(username,rd);
		System.out.println("发送验证码:"+rd);
		
	}
	public boolean checkSms(String username, String sms) {
		Integer cacheSms = cacheManager.getCache("sms").get(username,Integer.class);
		if(cacheSms!=null && cacheSms.equals(Integer.valueOf(sms))){
			return true;
		}
		return false;
	}



}
